<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
						   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
						   http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
						   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd">

	<!-- 
	启动包扫描功能，以便注册带有@Controller、@Service、@repository、@Component等注解的类成为spring的bean
	扫描各个类确定@Controller和@RequestMapping注解的存在。只有带有这些注解的类才能够像控制器一样操作 -->
    <context:component-scan base-package="com.napoleon.life" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.RestController"/>
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
	</context:component-scan>
	
	<mvc:annotation-driven>
		<mvc:message-converters>
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>application/json;charset=UTF-8</value>
						<value>text/plain;charset=UTF-8</value>
					</list>
				</property>
				<property name="writeAcceptCharset" value="false" />
			</bean>
			<bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>application/json;charset=UTF-8</value>
						<value>text/html;charset=UTF-8</value>
					</list>
				</property>
			</bean>
			<bean class="org.springframework.http.converter.FormHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>text/plain;charset=UTF-8</value>
						<value>text/html;charset=UTF-8</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
		
		<mvc:argument-resolvers>  
            <bean class="com.napoleon.life.framework.resolver.UserArgumentResolver"/>  
        </mvc:argument-resolvers>
	</mvc:annotation-driven>
	
	<!-- 这个拦截器检测当前HTTP请求中是否存在一个特殊的参数，这个参数名可以用这个拦截器的paramName属性定制，如果这样一个参数存在于当前请求中，
	这个拦截器根据参数值修改用户区域 -->
	<bean id = "localeChangeInterceptor" class = "org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
		<property name="paramName" value = "language"></property>
	</bean>
	
	<!-- 
		<mvc:annotation-driven /> 会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean,
		是spring MVC为@Controllers分发请求所必须的。
	 
	 在WEB应用上下文注册一个DefaultAnnotationHandlerMapping和一个AnnotationMethodHandlerAdapter实例，
	     这些实例分别在类级别和方法级别处理@RequestMapping注解 
	<bean class = "org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		<property name="interceptors">
			<list>
				<ref bean="executionTimeInterceptor"/>
				<ref bean="localeChangeInterceptor"/>
			</list>
		</property>
	</bean>-->
	
	<!-- 绑定属性编辑器
	<bean class = "org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="webBindingInitializer">
			<bean class = "com.juno.util.JunoBindingInitializer"></bean>
		</property>
	</bean> -->
	
	
	
	<!-- 配置视图解析策略，将逻辑视图名称解析为视图实现以供显示 (注意此处的顺序的重要性)
	<bean class = "org.springframework.web.servlet.view.ResourceBundleViewResolver">
		<property name="basename" value="views"></property>
		<property name="order" value = "0"></property>
	</bean>-->
	
	<!-- 
	<bean class = "org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value = "org.springframework.web.servlet.view.JstlView"></property>
		<property name="prefix" value = "/WEB-INF/views/"></property>
		<property name="suffix" value = ".jsp"></property>
		<property name="order" value = "1"></property>
	</bean> -->
	
	
	<!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 p:prefix中模板放置路径 -->
	<bean id="velocityConfig"
		class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
		<property name="resourceLoaderPath" value="/WEB-INF/views/" />
		<property name="velocityProperties">
			<props>
				<prop key="input.encoding">UTF-8</prop>
				<prop key="output.encoding">UTF-8</prop>
			</props>
		</property>
	</bean>

	<bean id="velocityViewResolver"
		class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
		<property name="contentType" value="text/html;charset=UTF-8" />
		<property name="exposeRequestAttributes" value="true" />
		<property name="exposeSessionAttributes" value="true" />
		<property name="requestContextAttribute" value="rc"></property>
		<property name="dateToolAttribute"><value>dateTool</value></property>
		<property name="prefix" value="" />
		<property name="suffix" value=".html" />
	</bean>
	
	<!-- 根据Session解析区域-->
	<bean id = "localeResolver" class = "org.springframework.web.servlet.i18n.SessionLocaleResolver">
		<property name="defaultLocale" value = "zh"></property>
	</bean>
	
	<!-- ResourceBundleMessageSource 实现从不同区域所用的不同资源集中解析信息，使用basename所指定的名字（messages）来获取以messages为基名称的资源文件 -->
	<bean id = "messageSource" class = "org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="messages"></property>
	</bean>
	
	<!-- 配置异常解析器，将不同类别的异常映射到不同的错误页面 -->
	<bean class = "org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="java.lang.NullPointerException">exception/nullPointException</prop>
			</props>
		</property>
		
		<!-- defaultErrorView 用于定义名为error的默认视图，这个视图用于发生未在exceptionMapping中映射的异常情况 -->
		<property name="defaultErrorView" value="exception/unknownError"></property>
	</bean>
	
	<!-- 支持附件上传 -->
	<bean id = "multipartResolver" class = "org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8" />
		<property name="maxUploadSize" value="5000000" />
		<property name="maxInMemorySize" value="10240" />
	</bean>
	
	<mvc:resources location="/include/" mapping="/include/**" cache-period="864000" /><!-- 24 * 3600 * 10 -->
	<mvc:resources location="/resources/" mapping="/resources/**" cache-period="864000" /><!-- 24 * 3600 * 10 -->
	
	
</beans>